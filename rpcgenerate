#!/bin/env python

# Python Code For RPC Generation
# Written by Aaron Bowen and Spencer Perry

import subprocess
import json
import sys
import os
import rpc_utility_funcs as utils

# Check Command Line 
filename = utils.CheckArgs(sys.argv)

# Parse declarations into a Python dictionary
decls = json.loads(subprocess.check_output(["./idl_to_json", filename]))

# split up functions and types into iterable lists 
idl_types = decls["types"].iteritems()
idl_funcs = decls["functions"].iteritems()

# Create Proxy and Stub Files to write to 
# (gen is temporary so we don't mix up handwritten ones)
# ultimately filename will not have gen attached
filebase = (os.path.splitext(filename)[0])

proxy = open(filebase+".genproxy.cpp", 'w')
stub  = open(filebase+".genstub.cpp", 'w')

# Generate File Comments and Includes for Stub And Proxy
p_includes = utils.generate_file_head(filename, "PROXY")
s_includes = utils.generate_file_head(filename, "STUB") 

# Write generated file comments, includes, and constants to file
proxy.write(p_includes)
stub.write(s_includes)

# Generate specific utlity functions for each idl file 
# these functions are specific to the idl types, think handle_person()
# deals with more complex serialization and deserialiation determined by type
p_idl_type_funcs = utils.generate_idl_type_func(idl_types, "PROXY")
s_idl_type_funcs = utils.generate_idl_type_func(idl_types, "STUB")

# Write the generated code for the specific idl type functions to 
# the respective file
proxy.write(p_idl_type_funcs)
stub.write(s_idl_type_funcs)

# Generate the code for the functions specified in the IDL file
# these functions are specific to the idl making
# the remote calls on the client, and invoking the actual routines on the stub
p_idl_funcs_funcs = utils.generate_idl_func_func(idl_funcs, "PROXY")
s_idl_funcs_funcs = utils.generate_idl_func_func(idl_funcs, "STUB")

# Write the generated code for the specfic idl functions to
# the respective file
proxy.write(p_idl_funcs_funcs)
stub.write(s_idl_funcs_funcs)


